/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@clickhouse/client-common/dist/client.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/client.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClickHouseClient = void 0;\nconst client_common_1 = __webpack_require__(/*! @clickhouse/client-common */ \"./node_modules/@clickhouse/client-common/dist/index.js\");\nclass ClickHouseClient {\n    constructor(config) {\n        Object.defineProperty(this, \"connectionParams\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"connection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"makeResultSet\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"valuesEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"closeStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sessionId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.connectionParams = getConnectionParams(config);\n        this.sessionId = config.session_id;\n        validateConnectionParams(this.connectionParams);\n        this.connection = config.impl.make_connection(this.connectionParams);\n        this.makeResultSet = config.impl.make_result_set;\n        this.valuesEncoder = config.impl.values_encoder;\n        this.closeStream = config.impl.close_stream;\n    }\n    getQueryParams(params) {\n        return {\n            clickhouse_settings: {\n                ...this.connectionParams.clickhouse_settings,\n                ...params.clickhouse_settings,\n            },\n            query_params: params.query_params,\n            abort_signal: params.abort_signal,\n            query_id: params.query_id,\n            session_id: this.sessionId,\n        };\n    }\n    /**\n     * Used for most statements that can have a response, such as SELECT.\n     * FORMAT clause should be specified separately via {@link QueryParams.format} (default is JSON)\n     * Consider using {@link ClickHouseClient.insert} for data insertion,\n     * or {@link ClickHouseClient.command} for DDLs.\n     */\n    async query(params) {\n        var _a;\n        const format = (_a = params.format) !== null && _a !== void 0 ? _a : 'JSON';\n        const query = formatQuery(params.query, format);\n        const { stream, query_id } = await this.connection.query({\n            query,\n            ...this.getQueryParams(params),\n        });\n        return this.makeResultSet(stream, format, query_id);\n    }\n    /**\n     * It should be used for statements that do not have any output,\n     * when the format clause is not applicable, or when you are not interested in the response at all.\n     * Response stream is destroyed immediately as we do not expect useful information there.\n     * Examples of such statements are DDLs or custom inserts.\n     * If you are interested in the response data, consider using {@link ClickHouseClient.exec}\n     */\n    async command(params) {\n        const { stream, query_id } = await this.exec(params);\n        await this.closeStream(stream);\n        return { query_id };\n    }\n    /**\n     * Similar to {@link ClickHouseClient.command}, but for the cases where the output is expected,\n     * but format clause is not applicable. The caller of this method is expected to consume the stream,\n     * otherwise, the request will eventually be timed out.\n     */\n    async exec(params) {\n        const query = removeTrailingSemi(params.query.trim());\n        return await this.connection.exec({\n            query,\n            ...this.getQueryParams(params),\n        });\n    }\n    /**\n     * The primary method for data insertion. It is recommended to avoid arrays in case of large inserts\n     * to reduce application memory consumption and consider streaming for most of such use cases.\n     * As the insert operation does not provide any output, the response stream is immediately destroyed.\n     * In case of a custom insert operation, such as, for example, INSERT FROM SELECT,\n     * consider using {@link ClickHouseClient.command}, passing the entire raw query there (including FORMAT clause).\n     */\n    async insert(params) {\n        const format = params.format || 'JSONCompactEachRow';\n        this.valuesEncoder.validateInsertValues(params.values, format);\n        const query = `INSERT INTO ${params.table.trim()} FORMAT ${format}`;\n        return await this.connection.insert({\n            query,\n            values: this.valuesEncoder.encodeValues(params.values, format),\n            ...this.getQueryParams(params),\n        });\n    }\n    /**\n     * Health-check request. It does not throw if an error occurs -\n     * the error is returned inside the result object.\n     */\n    async ping() {\n        return await this.connection.ping();\n    }\n    /**\n     * Shuts down the underlying connection.\n     * This method should ideally be called only once per application lifecycle,\n     * for example, during the graceful shutdown phase.\n     */\n    async close() {\n        return await this.connection.close();\n    }\n}\nexports.ClickHouseClient = ClickHouseClient;\nfunction formatQuery(query, format) {\n    query = query.trim();\n    query = removeTrailingSemi(query);\n    return query + ' \\nFORMAT ' + format;\n}\nfunction removeTrailingSemi(query) {\n    let lastNonSemiIdx = query.length;\n    for (let i = lastNonSemiIdx; i > 0; i--) {\n        if (query[i - 1] !== ';') {\n            lastNonSemiIdx = i;\n            break;\n        }\n    }\n    if (lastNonSemiIdx !== query.length) {\n        return query.slice(0, lastNonSemiIdx);\n    }\n    return query;\n}\nfunction validateConnectionParams({ url }) {\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n        throw new Error(`Only http(s) protocol is supported, but given: [${url.protocol}]`);\n    }\n}\nfunction createUrl(host) {\n    try {\n        return new URL(host);\n    }\n    catch (err) {\n        throw new Error('Configuration parameter \"host\" contains malformed url.');\n    }\n}\nfunction getConnectionParams(config) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    return {\n        application_id: config.application,\n        url: createUrl((_a = config.host) !== null && _a !== void 0 ? _a : 'http://localhost:8123'),\n        request_timeout: (_b = config.request_timeout) !== null && _b !== void 0 ? _b : 300000,\n        max_open_connections: (_c = config.max_open_connections) !== null && _c !== void 0 ? _c : Infinity,\n        compression: {\n            decompress_response: (_e = (_d = config.compression) === null || _d === void 0 ? void 0 : _d.response) !== null && _e !== void 0 ? _e : true,\n            compress_request: (_g = (_f = config.compression) === null || _f === void 0 ? void 0 : _f.request) !== null && _g !== void 0 ? _g : false,\n        },\n        username: (_h = config.username) !== null && _h !== void 0 ? _h : 'default',\n        password: (_j = config.password) !== null && _j !== void 0 ? _j : '',\n        database: (_k = config.database) !== null && _k !== void 0 ? _k : 'default',\n        clickhouse_settings: (_l = config.clickhouse_settings) !== null && _l !== void 0 ? _l : {},\n        logWriter: new client_common_1.LogWriter(((_m = config === null || config === void 0 ? void 0 : config.log) === null || _m === void 0 ? void 0 : _m.LoggerClass)\n            ? new config.log.LoggerClass()\n            : new client_common_1.DefaultLogger(), (_o = config.log) === null || _o === void 0 ? void 0 : _o.level),\n    };\n}\n//# sourceMappingURL=client.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/client.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_params.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_params.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatQueryParams = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./node_modules/@clickhouse/client-common/dist/utils/index.js\");\nfunction formatQueryParams(value, wrapStringInQuotes = false) {\n    if (value === null || value === undefined)\n        return '\\\\N';\n    if (Number.isNaN(value))\n        return 'nan';\n    if (value === Number.POSITIVE_INFINITY)\n        return '+inf';\n    if (value === Number.NEGATIVE_INFINITY)\n        return '-inf';\n    if (typeof value === 'number')\n        return String(value);\n    if (typeof value === 'boolean')\n        return value ? '1' : '0';\n    if (typeof value === 'string') {\n        const escapedValue = (0, utils_1.replaceAll)((0, utils_1.replaceAll)(value, `\\\\`, `\\\\\\\\`), `'`, `\\\\'`);\n        return wrapStringInQuotes ? `'${escapedValue}'` : escapedValue;\n    }\n    if (Array.isArray(value)) {\n        const formatted = value.map((v) => formatQueryParams(v, true));\n        return `[${formatted.join(',')}]`;\n    }\n    if (value instanceof Date) {\n        // The ClickHouse server parses numbers as time-zone-agnostic Unix timestamps\n        const unixTimestamp = Math.floor(value.getTime() / 1000)\n            .toString()\n            .padStart(10, '0');\n        const milliseconds = value.getUTCMilliseconds();\n        return milliseconds === 0\n            ? unixTimestamp\n            : `${unixTimestamp}.${milliseconds.toString().padStart(3, '0')}`;\n    }\n    if (typeof value === 'object') {\n        const formatted = [];\n        for (const [key, val] of Object.entries(value)) {\n            formatted.push(`${formatQueryParams(key, true)}:${formatQueryParams(val, true)}`);\n        }\n        return `{${formatted.join(',')}}`;\n    }\n    throw new Error(`Unsupported value in query parameters: [${value}].`);\n}\nexports.formatQueryParams = formatQueryParams;\n//# sourceMappingURL=format_query_params.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_params.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_settings.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_settings.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatQuerySettings = void 0;\nconst settings_1 = __webpack_require__(/*! ../settings */ \"./node_modules/@clickhouse/client-common/dist/settings.js\");\nfunction formatQuerySettings(value) {\n    if (typeof value === 'boolean')\n        return value ? '1' : '0';\n    if (typeof value === 'number')\n        return String(value);\n    if (typeof value === 'string')\n        return value;\n    // ClickHouse requires a specific, non-JSON format for passing maps\n    // as a setting value - single quotes instead of double\n    // Example: {'system.numbers':'number != 3'}\n    if (value instanceof settings_1.SettingsMap) {\n        return value.toString();\n    }\n    throw new Error(`Unsupported value in query settings: [${value}].`);\n}\nexports.formatQuerySettings = formatQuerySettings;\n//# sourceMappingURL=format_query_settings.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_settings.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/data_formatter/formatter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/data_formatter/formatter.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeJSON = exports.decode = exports.validateStreamFormat = exports.isSupportedRawFormat = void 0;\nconst streamableJSONFormats = [\n    'JSONEachRow',\n    'JSONStringsEachRow',\n    'JSONCompactEachRow',\n    'JSONCompactStringsEachRow',\n    'JSONCompactEachRowWithNames',\n    'JSONCompactEachRowWithNamesAndTypes',\n    'JSONCompactStringsEachRowWithNames',\n    'JSONCompactStringsEachRowWithNamesAndTypes',\n];\nconst singleDocumentJSONFormats = [\n    'JSON',\n    'JSONStrings',\n    'JSONCompact',\n    'JSONCompactStrings',\n    'JSONColumnsWithMetadata',\n    'JSONObjectEachRow',\n];\nconst supportedJSONFormats = [\n    ...singleDocumentJSONFormats,\n    ...streamableJSONFormats,\n];\nconst supportedRawFormats = [\n    'CSV',\n    'CSVWithNames',\n    'CSVWithNamesAndTypes',\n    'TabSeparated',\n    'TabSeparatedRaw',\n    'TabSeparatedWithNames',\n    'TabSeparatedWithNamesAndTypes',\n    'CustomSeparated',\n    'CustomSeparatedWithNames',\n    'CustomSeparatedWithNamesAndTypes',\n];\n// TODO add others formats\nconst streamableFormat = [\n    ...streamableJSONFormats,\n    ...supportedRawFormats,\n];\nfunction isNotStreamableJSONFamily(format) {\n    // @ts-expect-error JSON is not assignable to notStreamableJSONFormats\n    return singleDocumentJSONFormats.includes(format);\n}\nfunction isStreamableJSONFamily(format) {\n    // @ts-expect-error JSON is not assignable to streamableJSONFormats\n    return streamableJSONFormats.includes(format);\n}\nfunction isSupportedRawFormat(dataFormat) {\n    return supportedRawFormats.includes(dataFormat);\n}\nexports.isSupportedRawFormat = isSupportedRawFormat;\nfunction validateStreamFormat(format) {\n    if (!streamableFormat.includes(format)) {\n        throw new Error(`${format} format is not streamable. Streamable formats: ${streamableFormat.join(',')}`);\n    }\n    return true;\n}\nexports.validateStreamFormat = validateStreamFormat;\n/**\n * Decodes a string in a ClickHouse format into a plain JavaScript object or an array of objects.\n * @param text a string in a ClickHouse data format\n * @param format One of the supported formats: https://clickhouse.com/docs/en/interfaces/formats/\n */\nfunction decode(text, format) {\n    if (isNotStreamableJSONFamily(format)) {\n        return JSON.parse(text);\n    }\n    if (isStreamableJSONFamily(format)) {\n        return text\n            .split('\\n')\n            .filter(Boolean)\n            .map((l) => decode(l, 'JSON'));\n    }\n    if (isSupportedRawFormat(format)) {\n        throw new Error(`Cannot decode ${format} to JSON`);\n    }\n    throw new Error(`The client does not support [${format}] format decoding.`);\n}\nexports.decode = decode;\n/**\n * Encodes a single row of values into a string in a JSON format acceptable by ClickHouse.\n * @param value a single value to encode.\n * @param format One of the supported JSON formats: https://clickhouse.com/docs/en/interfaces/formats/\n * @returns string\n */\nfunction encodeJSON(value, format) {\n    if (supportedJSONFormats.includes(format)) {\n        return JSON.stringify(value) + '\\n';\n    }\n    throw new Error(`The client does not support JSON encoding in [${format}] format.`);\n}\nexports.encodeJSON = encodeJSON;\n//# sourceMappingURL=formatter.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/data_formatter/formatter.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/data_formatter/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/data_formatter/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatQuerySettings = exports.formatQueryParams = void 0;\n__exportStar(__webpack_require__(/*! ./formatter */ \"./node_modules/@clickhouse/client-common/dist/data_formatter/formatter.js\"), exports);\nvar format_query_params_1 = __webpack_require__(/*! ./format_query_params */ \"./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_params.js\");\nObject.defineProperty(exports, \"formatQueryParams\", ({ enumerable: true, get: function () { return format_query_params_1.formatQueryParams; } }));\nvar format_query_settings_1 = __webpack_require__(/*! ./format_query_settings */ \"./node_modules/@clickhouse/client-common/dist/data_formatter/format_query_settings.js\");\nObject.defineProperty(exports, \"formatQuerySettings\", ({ enumerable: true, get: function () { return format_query_settings_1.formatQuerySettings; } }));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/data_formatter/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/error/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/error/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./parse_error */ \"./node_modules/@clickhouse/client-common/dist/error/parse_error.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/error/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/error/parse_error.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/error/parse_error.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseError = exports.ClickHouseError = void 0;\nconst errorRe = /(Code|Error): (?<code>\\d+).*Exception: (?<message>.+)\\((?<type>(?=.+[A-Z]{3})[A-Z0-9_]+?)\\)/s;\nclass ClickHouseError extends Error {\n    constructor({ message, code, type }) {\n        super(message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.code = code;\n        this.type = type;\n        // Set the prototype explicitly, see:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClickHouseError.prototype);\n    }\n}\nexports.ClickHouseError = ClickHouseError;\nfunction parseError(input) {\n    const inputIsError = input instanceof Error;\n    const message = inputIsError ? input.message : input;\n    const match = message.match(errorRe);\n    const groups = match === null || match === void 0 ? void 0 : match.groups;\n    if (groups) {\n        return new ClickHouseError(groups);\n    }\n    else {\n        return inputIsError ? input : new Error(input);\n    }\n}\nexports.parseError = parseError;\n//# sourceMappingURL=parse_error.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/error/parse_error.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatQueryParams = exports.formatQuerySettings = exports.parseError = exports.DefaultLogger = exports.LogWriter = exports.withHttpSettings = exports.transformUrl = exports.toSearchParams = exports.isSuccessfulResponse = exports.withCompressionHeaders = exports.validateStreamFormat = exports.decode = exports.isSupportedRawFormat = exports.encodeJSON = exports.SettingsMap = exports.ClickHouseLogLevel = exports.ClickHouseError = exports.ClickHouseClient = void 0;\n/** Should be re-exported by the implementation */\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/@clickhouse/client-common/dist/client.js\");\nObject.defineProperty(exports, \"ClickHouseClient\", ({ enumerable: true, get: function () { return client_1.ClickHouseClient; } }));\nvar error_1 = __webpack_require__(/*! ./error */ \"./node_modules/@clickhouse/client-common/dist/error/index.js\");\nObject.defineProperty(exports, \"ClickHouseError\", ({ enumerable: true, get: function () { return error_1.ClickHouseError; } }));\nvar logger_1 = __webpack_require__(/*! ./logger */ \"./node_modules/@clickhouse/client-common/dist/logger.js\");\nObject.defineProperty(exports, \"ClickHouseLogLevel\", ({ enumerable: true, get: function () { return logger_1.ClickHouseLogLevel; } }));\nvar settings_1 = __webpack_require__(/*! ./settings */ \"./node_modules/@clickhouse/client-common/dist/settings.js\");\nObject.defineProperty(exports, \"SettingsMap\", ({ enumerable: true, get: function () { return settings_1.SettingsMap; } }));\n/** For implementations usage only */\nvar data_formatter_1 = __webpack_require__(/*! ./data_formatter */ \"./node_modules/@clickhouse/client-common/dist/data_formatter/index.js\");\nObject.defineProperty(exports, \"encodeJSON\", ({ enumerable: true, get: function () { return data_formatter_1.encodeJSON; } }));\nObject.defineProperty(exports, \"isSupportedRawFormat\", ({ enumerable: true, get: function () { return data_formatter_1.isSupportedRawFormat; } }));\nObject.defineProperty(exports, \"decode\", ({ enumerable: true, get: function () { return data_formatter_1.decode; } }));\nObject.defineProperty(exports, \"validateStreamFormat\", ({ enumerable: true, get: function () { return data_formatter_1.validateStreamFormat; } }));\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@clickhouse/client-common/dist/utils/index.js\");\nObject.defineProperty(exports, \"withCompressionHeaders\", ({ enumerable: true, get: function () { return utils_1.withCompressionHeaders; } }));\nObject.defineProperty(exports, \"isSuccessfulResponse\", ({ enumerable: true, get: function () { return utils_1.isSuccessfulResponse; } }));\nObject.defineProperty(exports, \"toSearchParams\", ({ enumerable: true, get: function () { return utils_1.toSearchParams; } }));\nObject.defineProperty(exports, \"transformUrl\", ({ enumerable: true, get: function () { return utils_1.transformUrl; } }));\nObject.defineProperty(exports, \"withHttpSettings\", ({ enumerable: true, get: function () { return utils_1.withHttpSettings; } }));\nvar logger_2 = __webpack_require__(/*! ./logger */ \"./node_modules/@clickhouse/client-common/dist/logger.js\");\nObject.defineProperty(exports, \"LogWriter\", ({ enumerable: true, get: function () { return logger_2.LogWriter; } }));\nObject.defineProperty(exports, \"DefaultLogger\", ({ enumerable: true, get: function () { return logger_2.DefaultLogger; } }));\nvar error_2 = __webpack_require__(/*! ./error */ \"./node_modules/@clickhouse/client-common/dist/error/index.js\");\nObject.defineProperty(exports, \"parseError\", ({ enumerable: true, get: function () { return error_2.parseError; } }));\nvar data_formatter_2 = __webpack_require__(/*! ./data_formatter */ \"./node_modules/@clickhouse/client-common/dist/data_formatter/index.js\");\nObject.defineProperty(exports, \"formatQuerySettings\", ({ enumerable: true, get: function () { return data_formatter_2.formatQuerySettings; } }));\nObject.defineProperty(exports, \"formatQueryParams\", ({ enumerable: true, get: function () { return data_formatter_2.formatQueryParams; } }));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/logger.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClickHouseLogLevel = exports.LogWriter = exports.DefaultLogger = void 0;\nclass DefaultLogger {\n    trace({ module, message, args }) {\n        console.trace(formatMessage({ module, message }), args);\n    }\n    debug({ module, message, args }) {\n        console.debug(formatMessage({ module, message }), args);\n    }\n    info({ module, message, args }) {\n        console.info(formatMessage({ module, message }), args);\n    }\n    warn({ module, message, args }) {\n        console.warn(formatMessage({ module, message }), args);\n    }\n    error({ module, message, args, err }) {\n        console.error(formatMessage({ module, message }), args, err);\n    }\n}\nexports.DefaultLogger = DefaultLogger;\nclass LogWriter {\n    constructor(logger, logLevel) {\n        Object.defineProperty(this, \"logger\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: logger\n        });\n        Object.defineProperty(this, \"logLevel\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.logLevel = logLevel !== null && logLevel !== void 0 ? logLevel : ClickHouseLogLevel.OFF;\n        this.info({\n            module: 'Logger',\n            message: `Log level is set to ${ClickHouseLogLevel[this.logLevel]}`,\n        });\n    }\n    trace(params) {\n        if (this.logLevel <= ClickHouseLogLevel.TRACE) {\n            this.logger.trace(params);\n        }\n    }\n    debug(params) {\n        if (this.logLevel <= ClickHouseLogLevel.DEBUG) {\n            this.logger.debug(params);\n        }\n    }\n    info(params) {\n        if (this.logLevel <= ClickHouseLogLevel.INFO) {\n            this.logger.info(params);\n        }\n    }\n    warn(params) {\n        if (this.logLevel <= ClickHouseLogLevel.WARN) {\n            this.logger.warn(params);\n        }\n    }\n    error(params) {\n        if (this.logLevel <= ClickHouseLogLevel.ERROR) {\n            this.logger.error(params);\n        }\n    }\n}\nexports.LogWriter = LogWriter;\nvar ClickHouseLogLevel;\n(function (ClickHouseLogLevel) {\n    ClickHouseLogLevel[ClickHouseLogLevel[\"TRACE\"] = 0] = \"TRACE\";\n    ClickHouseLogLevel[ClickHouseLogLevel[\"DEBUG\"] = 1] = \"DEBUG\";\n    ClickHouseLogLevel[ClickHouseLogLevel[\"INFO\"] = 2] = \"INFO\";\n    ClickHouseLogLevel[ClickHouseLogLevel[\"WARN\"] = 3] = \"WARN\";\n    ClickHouseLogLevel[ClickHouseLogLevel[\"ERROR\"] = 4] = \"ERROR\";\n    ClickHouseLogLevel[ClickHouseLogLevel[\"OFF\"] = 127] = \"OFF\";\n})(ClickHouseLogLevel = exports.ClickHouseLogLevel || (exports.ClickHouseLogLevel = {}));\nfunction formatMessage({ module, message, }) {\n    return `[@clickhouse/client][${module}] ${message}`;\n}\n//# sourceMappingURL=logger.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/logger.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/settings.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/settings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SettingsMap = void 0;\nclass SettingsMap {\n    constructor(record) {\n        Object.defineProperty(this, \"record\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: record\n        });\n    }\n    toString() {\n        return `{${Object.entries(this.record)\n            .map(([k, v]) => `'${k}':'${v}'`)\n            .join(',')}}`;\n    }\n    static from(record) {\n        return new this(record);\n    }\n}\nexports.SettingsMap = SettingsMap;\n//# sourceMappingURL=settings.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/settings.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/utils/connection.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/utils/connection.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSuccessfulResponse = exports.withHttpSettings = exports.withCompressionHeaders = void 0;\nfunction withCompressionHeaders({ headers, compress_request, decompress_response, }) {\n    return {\n        ...headers,\n        ...(decompress_response ? { 'Accept-Encoding': 'gzip' } : {}),\n        ...(compress_request ? { 'Content-Encoding': 'gzip' } : {}),\n    };\n}\nexports.withCompressionHeaders = withCompressionHeaders;\nfunction withHttpSettings(clickhouse_settings, compression) {\n    return {\n        ...(compression\n            ? {\n                enable_http_compression: 1,\n            }\n            : {}),\n        ...clickhouse_settings,\n    };\n}\nexports.withHttpSettings = withHttpSettings;\nfunction isSuccessfulResponse(statusCode) {\n    return Boolean(statusCode && 200 <= statusCode && statusCode < 300);\n}\nexports.isSuccessfulResponse = isSuccessfulResponse;\n//# sourceMappingURL=connection.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/utils/connection.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/utils/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/utils/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./connection */ \"./node_modules/@clickhouse/client-common/dist/utils/connection.js\"), exports);\n__exportStar(__webpack_require__(/*! ./string */ \"./node_modules/@clickhouse/client-common/dist/utils/string.js\"), exports);\n__exportStar(__webpack_require__(/*! ./url */ \"./node_modules/@clickhouse/client-common/dist/utils/url.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/utils/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/utils/string.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/utils/string.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replaceAll = void 0;\nfunction replaceAll(input, replace_char, new_char) {\n    return input.split(replace_char).join(new_char);\n}\nexports.replaceAll = replaceAll;\n//# sourceMappingURL=string.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/utils/string.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-common/dist/utils/url.js":
/*!******************************************************************!*\
  !*** ./node_modules/@clickhouse/client-common/dist/utils/url.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toSearchParams = exports.transformUrl = void 0;\nconst data_formatter_1 = __webpack_require__(/*! ../data_formatter */ \"./node_modules/@clickhouse/client-common/dist/data_formatter/index.js\");\nfunction transformUrl({ url, pathname, searchParams, }) {\n    const newUrl = new URL(url);\n    if (pathname) {\n        newUrl.pathname = pathname;\n    }\n    if (searchParams) {\n        newUrl.search = searchParams === null || searchParams === void 0 ? void 0 : searchParams.toString();\n    }\n    return newUrl;\n}\nexports.transformUrl = transformUrl;\n// TODO validate max length of the resulting query\n// https://stackoverflow.com/questions/812925/what-is-the-maximum-possible-length-of-a-query-string\nfunction toSearchParams({ database, query, query_params, clickhouse_settings, session_id, query_id, }) {\n    if (clickhouse_settings === undefined &&\n        query_params === undefined &&\n        query === undefined &&\n        database === 'default') {\n        return;\n    }\n    const params = new URLSearchParams();\n    if (query_params !== undefined) {\n        for (const [key, value] of Object.entries(query_params)) {\n            params.set(`param_${key}`, (0, data_formatter_1.formatQueryParams)(value));\n        }\n    }\n    if (clickhouse_settings !== undefined) {\n        for (const [key, value] of Object.entries(clickhouse_settings)) {\n            if (value !== undefined) {\n                params.set(key, (0, data_formatter_1.formatQuerySettings)(value));\n            }\n        }\n    }\n    if (database !== 'default') {\n        params.set('database', database);\n    }\n    if (query) {\n        params.set('query', query);\n    }\n    if (session_id) {\n        params.set('session_id', session_id);\n    }\n    if (query_id) {\n        params.set('query_id', query_id);\n    }\n    return params;\n}\nexports.toSearchParams = toSearchParams;\n//# sourceMappingURL=url.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-common/dist/utils/url.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/client.js":
/*!************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/client.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createClient = void 0;\nconst client_common_1 = __webpack_require__(/*! @clickhouse/client-common */ \"./node_modules/@clickhouse/client-common/dist/index.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"./node_modules/@clickhouse/client-web/dist/connection/index.js\");\nconst result_set_1 = __webpack_require__(/*! ./result_set */ \"./node_modules/@clickhouse/client-web/dist/result_set.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@clickhouse/client-web/dist/utils/index.js\");\nfunction createClient(config) {\n    return new client_common_1.ClickHouseClient({\n        impl: {\n            make_connection: (params) => new connection_1.WebConnection(params),\n            make_result_set: (stream, format, query_id) => new result_set_1.ResultSet(stream, format, query_id),\n            values_encoder: new utils_1.WebValuesEncoder(),\n            close_stream: (stream) => stream.cancel(),\n        },\n        ...(config || {}),\n    });\n}\nexports.createClient = createClient;\n//# sourceMappingURL=client.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/client.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/connection/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/connection/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./web_connection */ \"./node_modules/@clickhouse/client-web/dist/connection/web_connection.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/connection/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/connection/web_connection.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/connection/web_connection.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebConnection = void 0;\nconst client_common_1 = __webpack_require__(/*! @clickhouse/client-common */ \"./node_modules/@clickhouse/client-common/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./node_modules/@clickhouse/client-web/dist/utils/index.js\");\nclass WebConnection {\n    constructor(params) {\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: params\n        });\n        Object.defineProperty(this, \"defaultHeaders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultHeaders = {\n            Authorization: `Basic ${btoa(`${params.username}:${params.password}`)}`,\n        };\n    }\n    async query(params) {\n        const query_id = getQueryId(params.query_id);\n        const clickhouse_settings = (0, client_common_1.withHttpSettings)(params.clickhouse_settings, this.params.compression.decompress_response);\n        const searchParams = (0, client_common_1.toSearchParams)({\n            database: this.params.database,\n            clickhouse_settings,\n            query_params: params.query_params,\n            session_id: params.session_id,\n            query_id,\n        });\n        const response = await this.request({\n            values: params.query,\n            params,\n            searchParams,\n        });\n        return {\n            query_id,\n            stream: response.body || new ReadableStream(),\n        };\n    }\n    async exec(params) {\n        const query_id = getQueryId(params.query_id);\n        const searchParams = (0, client_common_1.toSearchParams)({\n            database: this.params.database,\n            clickhouse_settings: params.clickhouse_settings,\n            query_params: params.query_params,\n            session_id: params.session_id,\n            query_id,\n        });\n        const response = await this.request({\n            values: params.query,\n            params,\n            searchParams,\n        });\n        return {\n            stream: response.body || new ReadableStream(),\n            query_id,\n        };\n    }\n    async insert(params) {\n        const query_id = getQueryId(params.query_id);\n        const searchParams = (0, client_common_1.toSearchParams)({\n            database: this.params.database,\n            clickhouse_settings: params.clickhouse_settings,\n            query_params: params.query_params,\n            query: params.query,\n            session_id: params.session_id,\n            query_id,\n        });\n        await this.request({\n            values: params.values,\n            params,\n            searchParams,\n        });\n        return {\n            query_id,\n        };\n    }\n    async ping() {\n        // ClickHouse /ping endpoint does not support CORS,\n        // so we are using a simple SELECT as a workaround\n        try {\n            const response = await this.request({\n                values: 'SELECT 1 FORMAT CSV',\n            });\n            if (response.body !== null) {\n                await response.body.cancel();\n            }\n            return { success: true };\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                return {\n                    success: false,\n                    error,\n                };\n            }\n            throw error; // should never happen\n        }\n    }\n    async close() {\n        return;\n    }\n    async request({ values, params, searchParams, pathname, method, }) {\n        const url = (0, client_common_1.transformUrl)({\n            url: this.params.url,\n            pathname: pathname !== null && pathname !== void 0 ? pathname : '/',\n            searchParams,\n        }).toString();\n        const abortController = new AbortController();\n        let isTimedOut = false;\n        const timeout = setTimeout(() => {\n            isTimedOut = true;\n            abortController.abort();\n        }, this.params.request_timeout);\n        let isAborted = false;\n        if ((params === null || params === void 0 ? void 0 : params.abort_signal) !== undefined) {\n            params.abort_signal.onabort = () => {\n                isAborted = true;\n                abortController.abort();\n            };\n        }\n        try {\n            const headers = (0, client_common_1.withCompressionHeaders)({\n                headers: this.defaultHeaders,\n                compress_request: false,\n                decompress_response: this.params.compression.decompress_response,\n            });\n            const response = await fetch(url, {\n                body: values,\n                headers,\n                keepalive: false,\n                method: method !== null && method !== void 0 ? method : 'POST',\n                signal: abortController.signal,\n            });\n            clearTimeout(timeout);\n            if ((0, client_common_1.isSuccessfulResponse)(response.status)) {\n                return response;\n            }\n            else {\n                return Promise.reject((0, client_common_1.parseError)(await (0, utils_1.getAsText)(response.body || new ReadableStream())));\n            }\n        }\n        catch (err) {\n            clearTimeout(timeout);\n            if (isAborted) {\n                return Promise.reject(new Error('The user aborted a request.'));\n            }\n            if (isTimedOut) {\n                return Promise.reject(new Error('Timeout error.'));\n            }\n            if (err instanceof Error) {\n                // maybe it's a ClickHouse error\n                return Promise.reject((0, client_common_1.parseError)(err));\n            }\n            // shouldn't happen\n            throw err;\n        }\n    }\n}\nexports.WebConnection = WebConnection;\nfunction getQueryId(query_id) {\n    return query_id || crypto.randomUUID();\n}\n//# sourceMappingURL=web_connection.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/connection/web_connection.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SettingsMap = exports.ClickHouseClient = exports.ClickHouseLogLevel = exports.ClickHouseError = exports.ResultSet = exports.createClient = void 0;\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/@clickhouse/client-web/dist/client.js\");\nObject.defineProperty(exports, \"createClient\", ({ enumerable: true, get: function () { return client_1.createClient; } }));\nvar result_set_1 = __webpack_require__(/*! ./result_set */ \"./node_modules/@clickhouse/client-web/dist/result_set.js\");\nObject.defineProperty(exports, \"ResultSet\", ({ enumerable: true, get: function () { return result_set_1.ResultSet; } }));\n/** Re-export @clickhouse/client-common types */\nvar client_common_1 = __webpack_require__(/*! @clickhouse/client-common */ \"./node_modules/@clickhouse/client-common/dist/index.js\");\nObject.defineProperty(exports, \"ClickHouseError\", ({ enumerable: true, get: function () { return client_common_1.ClickHouseError; } }));\nObject.defineProperty(exports, \"ClickHouseLogLevel\", ({ enumerable: true, get: function () { return client_common_1.ClickHouseLogLevel; } }));\nObject.defineProperty(exports, \"ClickHouseClient\", ({ enumerable: true, get: function () { return client_common_1.ClickHouseClient; } }));\nObject.defineProperty(exports, \"SettingsMap\", ({ enumerable: true, get: function () { return client_common_1.SettingsMap; } }));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/result_set.js":
/*!****************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/result_set.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResultSet = void 0;\nconst client_common_1 = __webpack_require__(/*! @clickhouse/client-common */ \"./node_modules/@clickhouse/client-common/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@clickhouse/client-web/dist/utils/index.js\");\nclass ResultSet {\n    constructor(_stream, format, query_id) {\n        Object.defineProperty(this, \"_stream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _stream\n        });\n        Object.defineProperty(this, \"format\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: format\n        });\n        Object.defineProperty(this, \"query_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: query_id\n        });\n        Object.defineProperty(this, \"isAlreadyConsumed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    async text() {\n        this.markAsConsumed();\n        return (0, utils_1.getAsText)(this._stream);\n    }\n    async json() {\n        const text = await this.text();\n        return (0, client_common_1.decode)(text, this.format);\n    }\n    stream() {\n        this.markAsConsumed();\n        (0, client_common_1.validateStreamFormat)(this.format);\n        let decodedChunk = '';\n        const decoder = new TextDecoder('utf-8');\n        const transform = new TransformStream({\n            start() {\n                //\n            },\n            transform: (chunk, controller) => {\n                if (chunk === null) {\n                    controller.terminate();\n                }\n                decodedChunk += decoder.decode(chunk);\n                const rows = [];\n                // eslint-disable-next-line no-constant-condition\n                while (true) {\n                    const idx = decodedChunk.indexOf('\\n');\n                    if (idx !== -1) {\n                        const text = decodedChunk.slice(0, idx);\n                        decodedChunk = decodedChunk.slice(idx + 1);\n                        rows.push({\n                            text,\n                            json() {\n                                return (0, client_common_1.decode)(text, 'JSON');\n                            },\n                        });\n                    }\n                    else {\n                        if (rows.length) {\n                            controller.enqueue(rows);\n                        }\n                        break;\n                    }\n                }\n            },\n            flush() {\n                decodedChunk = '';\n            },\n        });\n        return this._stream.pipeThrough(transform, {\n            preventClose: false,\n            preventAbort: false,\n            preventCancel: false,\n        });\n    }\n    async close() {\n        this.markAsConsumed();\n        await this._stream.cancel();\n    }\n    markAsConsumed() {\n        if (this.isAlreadyConsumed) {\n            throw new Error(streamAlreadyConsumedMessage);\n        }\n        this.isAlreadyConsumed = true;\n    }\n}\nexports.ResultSet = ResultSet;\nconst streamAlreadyConsumedMessage = 'Stream has been already consumed';\n//# sourceMappingURL=result_set.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/result_set.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/utils/encoder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/utils/encoder.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebValuesEncoder = void 0;\nconst client_common_1 = __webpack_require__(/*! @clickhouse/client-common */ \"./node_modules/@clickhouse/client-common/dist/index.js\");\nconst stream_1 = __webpack_require__(/*! ./stream */ \"./node_modules/@clickhouse/client-web/dist/utils/stream.js\");\nclass WebValuesEncoder {\n    encodeValues(values, format) {\n        throwIfStream(values);\n        // JSON* arrays\n        if (Array.isArray(values)) {\n            return values.map((value) => (0, client_common_1.encodeJSON)(value, format)).join('');\n        }\n        // JSON & JSONObjectEachRow format input\n        if (typeof values === 'object') {\n            return (0, client_common_1.encodeJSON)(values, format);\n        }\n        throw new Error(`Cannot encode values of type ${typeof values} with ${format} format`);\n    }\n    validateInsertValues(values) {\n        throwIfStream(values);\n        if (!Array.isArray(values) && typeof values !== 'object') {\n            throw new Error('Insert expected \"values\" to be an array or a JSON object, ' +\n                `got: ${typeof values}`);\n        }\n    }\n}\nexports.WebValuesEncoder = WebValuesEncoder;\nfunction throwIfStream(values) {\n    if ((0, stream_1.isStream)(values)) {\n        throw new Error('Streaming is not supported for inserts in the web version of the client');\n    }\n}\n//# sourceMappingURL=encoder.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/utils/encoder.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/utils/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/utils/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./stream */ \"./node_modules/@clickhouse/client-web/dist/utils/stream.js\"), exports);\n__exportStar(__webpack_require__(/*! ./encoder */ \"./node_modules/@clickhouse/client-web/dist/utils/encoder.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/utils/index.js?");

/***/ }),

/***/ "./node_modules/@clickhouse/client-web/dist/utils/stream.js":
/*!******************************************************************!*\
  !*** ./node_modules/@clickhouse/client-web/dist/utils/stream.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAsText = exports.isStream = void 0;\nfunction isStream(obj) {\n    return (obj !== null && obj !== undefined && typeof obj.pipeThrough === 'function');\n}\nexports.isStream = isStream;\nasync function getAsText(stream) {\n    let result = '';\n    let isDone = false;\n    const textDecoder = new TextDecoder();\n    const reader = stream.getReader();\n    while (!isDone) {\n        const { done, value } = await reader.read();\n        result += textDecoder.decode(value, { stream: true });\n        isDone = done;\n    }\n    // flush\n    result += textDecoder.decode();\n    return result;\n}\nexports.getAsText = getAsText;\n//# sourceMappingURL=stream.js.map\n\n//# sourceURL=webpack://test-analytics-front/./node_modules/@clickhouse/client-web/dist/utils/stream.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { createClient } = __webpack_require__(/*! @clickhouse/client-web */ \"./node_modules/@clickhouse/client-web/dist/index.js\");\nconst connection_1 = __webpack_require__(/*! @clickhouse/client-web/dist/connection */ \"./node_modules/@clickhouse/client-web/dist/connection/index.js\");\n\n\nasync function doWork() {\n    const client = createClient({\n        host: \"http://172.17.0.2:8123\",\n        database: \"default\",\n        compression: { request: false,  response: false },\n        clickhouse_settings: {\n            enable_http_compression: undefined,\n            add_http_cors_header: \"1\",\n            result_overflow_mode: \"break\",\n            max_result_rows: 1000,\n            max_result_bytes: 1000000,\n        },\n    })\n    var response =  await client.query({ query: \"select * from TestRuns\", format: \"JSONCompact\"  })\n    var result = await response.json();\n    console.log(result);\n}\n\nconsole.log(\"Hi2!\")\ndoWork();\n\n\n\n//# sourceURL=webpack://test-analytics-front/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;